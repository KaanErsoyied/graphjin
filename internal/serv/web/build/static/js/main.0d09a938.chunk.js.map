{"version":3,"sources":["App.js","index.js"],"names":["url","window","location","host","subscriptionUrl","fetcher","createGraphiQLFetcher","App","useState","schema","setSchema","query","setQuery","explorerOpen","setExplorerOpen","graphiql","React","createRef","useEffect","a","introspect","getIntrospectionQuery","next","res","buildClientSchema","value","data","handleEditQuery","console","log","handleToggleExplorer","className","onEdit","onRunOperation","operationName","handleRunQuery","explorerIsOpen","onToggleExplorer","ref","defaultSecondaryEditorOpen","headerEditorEnabled","shouldPersistHeaders","onEditQuery","Logo","style","letterSpacing","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","ReactDOM","render","document","getElementById"],"mappings":"iSAQA,MAAMA,EAAG,iBAAaC,OAAOC,SAASC,KAA7B,mBACHC,EAAe,eAAWH,OAAOC,SAASC,KAA3B,mBAEfE,EAAUC,YAAsB,CACpCN,MACAI,oBAsFaG,MArEH,KAAO,MAAD,EACYC,mBAAS,MADrB,mBACTC,EADS,KACDC,EADC,OAEUF,mBAhBV,oOAcA,mBAETG,EAFS,KAEFC,EAFE,OAGwBJ,oBAAS,GAHjC,mBAGTK,EAHS,KAGKC,EAHL,KAKhB,IAAIC,EAAWC,IAAMC,YAErBC,oBAAU,KACR,sBAAC,8BAAAC,EAAA,6DACKC,EAAaf,EAAQ,CAAEM,MAAOU,gBADnC,SAEiBD,EAAWE,OAF5B,OAEKC,EAFL,OAGCb,EAAUc,YAAkBD,EAAIE,MAAMC,OAHvC,0CAAD,IAKC,IAEH,MAAMC,EAAmBhB,IACvBC,EAASD,GACTiB,QAAQC,IAAI,IAAKlB,IAGbmB,EAAuB,IAAMhB,GAAiBD,GAEpD,OACE,yBAAKkB,UAAU,sBACb,kBAAC,IAAD,CACEtB,OAAQA,EACRE,MAAOA,EACPqB,OAAQL,EACRM,eAAiBC,GACfnB,EAASoB,eAAeD,GAE1BE,eAAgBvB,EAChBwB,iBAAkBP,IAEpB,kBAAC,IAAD,CACEQ,IAAMA,GAASvB,EAAWuB,EAC1BjC,QAASA,EACTkC,4BAA4B,EAC5BC,qBAAqB,EACrBC,sBAAsB,EACtB9B,MAAOA,EACP+B,YAAaf,GAEb,kBAAC,IAASgB,KAAV,KACE,yBAAKC,MAAO,CAAEC,cAAe,QAA7B,aAGF,kBAAC,IAASC,QAAV,KACE,kBAAC,IAASC,OAAV,CACEC,QAAS,IAAMjC,EAASkC,sBACxBC,MAAM,WACNC,MAAM,kCAER,kBAAC,IAASJ,OAAV,CACEC,QAAS,IAAMjC,EAASqC,sBACxBF,MAAM,UACNC,MAAM,iBAER,kBAAC,IAASJ,OAAV,CACEC,QAASlB,EACToB,MAAM,WACNC,MAAM,wB,OCrFlBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0d09a938.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport GraphiQL from \"graphiql\";\nimport GraphiQLExplorer from \"graphiql-explorer\";\nimport { createGraphiQLFetcher } from \"@graphiql/toolkit\";\nimport { buildClientSchema, getIntrospectionQuery } from \"graphql\";\n\nimport \"graphiql/graphiql.min.css\";\n\nconst url = `http://${window.location.host}/api/v1/graphql`;\nconst subscriptionUrl = `ws://${window.location.host}/api/v1/graphql`;\n\nconst fetcher = createGraphiQLFetcher({\n  url,\n  subscriptionUrl,\n});\n\nconst defaultQuery = `\n# Use this editor to build and test your GraphQL queries\n# Set a query name if you want the query saved to the \n# allow list to use in production\n\nquery {\n  users(id: \"3\") {\n    id\n    full_name\n    email\n  }\n}\n`;\n\nconst App = () => {\n  const [schema, setSchema] = useState(null);\n  const [query, setQuery] = useState(defaultQuery);\n  const [explorerOpen, setExplorerOpen] = useState(true);\n\n  let graphiql = React.createRef();\n\n  useEffect(() => {\n    (async function () {\n      let introspect = fetcher({ query: getIntrospectionQuery() });\n      let res = await introspect.next();\n      setSchema(buildClientSchema(res.value.data));\n    })();\n  }, []);\n\n  const handleEditQuery = (query) => {\n    setQuery(query);\n    console.log(\">\", query);\n  };\n\n  const handleToggleExplorer = () => setExplorerOpen(!explorerOpen);\n\n  return (\n    <div className=\"graphiql-container\">\n      <GraphiQLExplorer\n        schema={schema}\n        query={query}\n        onEdit={handleEditQuery}\n        onRunOperation={(operationName) =>\n          graphiql.handleRunQuery(operationName)\n        }\n        explorerIsOpen={explorerOpen}\n        onToggleExplorer={handleToggleExplorer}\n      />\n      <GraphiQL\n        ref={(ref) => (graphiql = ref)}\n        fetcher={fetcher}\n        defaultSecondaryEditorOpen={true}\n        headerEditorEnabled={true}\n        shouldPersistHeaders={true}\n        query={query}\n        onEditQuery={handleEditQuery}\n      >\n        <GraphiQL.Logo>\n          <div style={{ letterSpacing: \"3px\" }}>GRAPHJIN</div>\n        </GraphiQL.Logo>\n\n        <GraphiQL.Toolbar>\n          <GraphiQL.Button\n            onClick={() => graphiql.handlePrettifyQuery()}\n            label=\"Prettify\"\n            title=\"Prettify Query (Shift-Ctrl-P)\"\n          />\n          <GraphiQL.Button\n            onClick={() => graphiql.handleToggleHistory()}\n            label=\"History\"\n            title=\"Show History\"\n          />\n          <GraphiQL.Button\n            onClick={handleToggleExplorer}\n            label=\"Explorer\"\n            title=\"Toggle Explorer\"\n          />\n        </GraphiQL.Toolbar>\n      </GraphiQL>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}