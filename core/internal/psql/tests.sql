=== RUN   TestCompileInsert
=== RUN   TestCompileInsert/simpleInsert
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (INSERT INTO "users" ("full_name", "email") SELECT "t"."full_name", "t"."email" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t RETURNING *) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id" FROM (SELECT "users"."id" FROM "users" LIMIT ('1') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/singleInsert
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("name", "description", "price", "user_id") SELECT "t"."name", "t"."description", "t"."price", "t"."user_id" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((("products"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/bulkInsert
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("name", "description") SELECT "t"."name", "t"."description" FROM "_sg_input" i, json_populate_recordset(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((("products"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/simpleInsertWithPresets
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("created_at", "updated_at", "price", "user_id", "name") SELECT 'now' :: timestamp without time zone, 'now' :: timestamp without time zone, (select price from prices where id = $2) :: numeric(7,2), $3 :: bigint, "t"."name" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("price", "user_id", "created_at", "updated_at", "name") SELECT (select price from prices where id = $2) :: numeric(7,2), $3 :: bigint, 'now' :: timestamp without time zone, 'now' :: timestamp without time zone, "t"."name" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("updated_at", "price", "user_id", "created_at", "name") SELECT 'now' :: timestamp without time zone, (select price from prices where id = $2) :: numeric(7,2), $3 :: bigint, 'now' :: timestamp without time zone, "t"."name" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("user_id", "created_at", "updated_at", "price", "name") SELECT $2 :: bigint, 'now' :: timestamp without time zone, 'now' :: timestamp without time zone, (select price from prices where id = $3) :: numeric(7,2), "t"."name" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/nestedInsertManyToMany
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("name", "price") SELECT "t"."name", "t"."price" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t RETURNING *), "customers" AS (INSERT INTO "customers" ("full_name", "email") SELECT "t"."full_name", "t"."email" FROM "_sg_input" i, json_populate_record(NULL::"customers", i.j->'customer') t RETURNING *), "purchases" AS (INSERT INTO "purchases" ("sale_type", "quantity", "due_date", "customer_id", "product_id") SELECT "t"."sale_type", "t"."quantity", "t"."due_date", "customers"."id", "products"."id" FROM "_sg_input" i, "customers", "products", json_populate_record(NULL::"purchases", i.j) t RETURNING *) SELECT jsonb_build_object('purchase', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "purchases_0"."sale_type" AS "sale_type", "purchases_0"."quantity" AS "quantity", "purchases_0"."due_date" AS "due_date", "__sj_1"."json" AS "product", "__sj_2"."json" AS "customer" FROM (SELECT "purchases"."sale_type", "purchases"."quantity", "purchases"."due_date", "purchases"."product_id", "purchases"."customer_id" FROM "purchases" LIMIT ('1') :: integer) AS "purchases_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "customers_2"."id" AS "id", "customers_2"."full_name" AS "full_name", "customers_2"."email" AS "email" FROM (SELECT "customers"."id", "customers"."full_name", "customers"."email" FROM "customers" WHERE ((("customers"."id") = ("purchases_0"."customer_id"))) LIMIT ('1') :: integer) AS "customers_2") AS "__sr_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."id") = ("purchases_0"."product_id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "customers" AS (INSERT INTO "customers" ("full_name", "email") SELECT "t"."full_name", "t"."email" FROM "_sg_input" i, json_populate_record(NULL::"customers", i.j->'customer') t RETURNING *), "products" AS (INSERT INTO "products" ("name", "price") SELECT "t"."name", "t"."price" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t RETURNING *), "purchases" AS (INSERT INTO "purchases" ("sale_type", "quantity", "due_date", "product_id", "customer_id") SELECT "t"."sale_type", "t"."quantity", "t"."due_date", "products"."id", "customers"."id" FROM "_sg_input" i, "products", "customers", json_populate_record(NULL::"purchases", i.j) t RETURNING *) SELECT jsonb_build_object('purchase', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "purchases_0"."sale_type" AS "sale_type", "purchases_0"."quantity" AS "quantity", "purchases_0"."due_date" AS "due_date", "__sj_1"."json" AS "product", "__sj_2"."json" AS "customer" FROM (SELECT "purchases"."sale_type", "purchases"."quantity", "purchases"."due_date", "purchases"."product_id", "purchases"."customer_id" FROM "purchases" LIMIT ('1') :: integer) AS "purchases_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "customers_2"."id" AS "id", "customers_2"."full_name" AS "full_name", "customers_2"."email" AS "email" FROM (SELECT "customers"."id", "customers"."full_name", "customers"."email" FROM "customers" WHERE ((("customers"."id") = ("purchases_0"."customer_id"))) LIMIT ('1') :: integer) AS "customers_2") AS "__sr_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."id") = ("purchases_0"."product_id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/nestedInsertOneToMany
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (INSERT INTO "users" ("full_name", "email", "created_at", "updated_at") SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t RETURNING *), "products" AS (INSERT INTO "products" ("name", "price", "created_at", "updated_at", "user_id", "id") SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at", "users"."id", "products"."user_id" FROM "_sg_input" i, "users", "users", json_populate_record(NULL::"products", i.j->'product') t RETURNING *) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/nestedInsertOneToOne
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (INSERT INTO "users" ("full_name", "email", "created_at", "updated_at") SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j->'user') t RETURNING *), "products" AS (INSERT INTO "products" ("name", "price", "created_at", "updated_at", "user_id") SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at", "users"."id" FROM "_sg_input" i, "users", json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "user" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."full_name" AS "full_name", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/nestedInsertOneToManyWithConnect
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (INSERT INTO "users" ("full_name", "email", "created_at", "updated_at") SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t RETURNING *), "products" AS ( UPDATE "products" SET "user_id" = "users"."id" FROM "users" WHERE ("products"."id" = ((i.j->'product'->'connect'->>'id'))::bigint) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/nestedInsertOneToOneWithConnect
WITH "_sg_input" AS (SELECT $1 :: json AS j), "_x_users" AS (SELECT "id" FROM "_sg_input" i,"users" WHERE "users"."id" = ((i.j->'user'->'connect'->>'id'))::bigint LIMIT 1), "products" AS (INSERT INTO "products" ("name", "price", "created_at", "updated_at", "user_id") SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at", "_x_users"."id" FROM "_sg_input" i, "_x_users", json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "user", "__sj_2"."json" AS "tags" FROM (SELECT "products"."id", "products"."name", "products"."user_id", "products"."tags" FROM "products" LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_2"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "tags_2"."id" AS "id", "tags_2"."name" AS "name" FROM (SELECT "tags"."id", "tags"."name" FROM "tags" WHERE ((("tags"."slug") = any ("products_0"."tags"))) LIMIT ('20') :: integer) AS "tags_2") AS "__sr_2") AS "__sj_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."full_name" AS "full_name", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileInsert/nestedInsertOneToOneWithConnectArray
WITH "_sg_input" AS (SELECT $1 :: json AS j), "_x_users" AS (SELECT "id" FROM "_sg_input" i,"users" WHERE "users"."id" = ANY((select a::bigint AS list from json_array_elements_text((i.j->'user'->'connect'->>'id')::json) AS a)) LIMIT 1), "products" AS (INSERT INTO "products" ("name", "price", "created_at", "updated_at", "user_id") SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at", "_x_users"."id" FROM "_sg_input" i, "_x_users", json_populate_record(NULL::"products", i.j) t RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "user" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."full_name" AS "full_name", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
--- PASS: TestCompileInsert (0.05s)
    --- PASS: TestCompileInsert/simpleInsert (0.00s)
    --- PASS: TestCompileInsert/singleInsert (0.00s)
    --- PASS: TestCompileInsert/bulkInsert (0.00s)
    --- PASS: TestCompileInsert/simpleInsertWithPresets (0.00s)
    --- PASS: TestCompileInsert/nestedInsertManyToMany (0.01s)
    --- PASS: TestCompileInsert/nestedInsertOneToMany (0.01s)
    --- PASS: TestCompileInsert/nestedInsertOneToOne (0.01s)
    --- PASS: TestCompileInsert/nestedInsertOneToManyWithConnect (0.01s)
    --- PASS: TestCompileInsert/nestedInsertOneToOneWithConnect (0.01s)
    --- PASS: TestCompileInsert/nestedInsertOneToOneWithConnectArray (0.00s)
=== RUN   TestCompileMutate
=== RUN   TestCompileMutate/singleUpsert
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("name", "description") SELECT "t"."name", "t"."description" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t  ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description WHERE (("products"."id") = '1' :: bigint) RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((("products"."id") = '1' :: bigint)) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileMutate/singleUpsertWhere
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (INSERT INTO "products" ("name", "description") SELECT "t"."name", "t"."description" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t  ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, description = EXCLUDED.description WHERE (("products"."price") > '3' :: numeric(7,2)) RETURNING *) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((("products"."price") > '3' :: numeric(7,2))) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileMutate/delete
WITH "products" AS (DELETE FROM "products" WHERE (((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND (("products"."id") = '1' :: bigint)) RETURNING "products".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND (("products"."id") = '1' :: bigint))) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
--- PASS: TestCompileMutate (0.01s)
    --- PASS: TestCompileMutate/singleUpsert (0.00s)
    --- PASS: TestCompileMutate/singleUpsertWhere (0.00s)
    --- PASS: TestCompileMutate/delete (0.00s)
=== RUN   TestCompileQuery
=== RUN   TestCompileQuery/simpleQuery
SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "__sj_1"."json" AS "user" FROM (SELECT "products"."id", "products"."user_id" FROM "products" WHERE (((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id" FROM (SELECT "users"."id" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withComplexArgs
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "products_0"."price" AS "price" FROM (SELECT DISTINCT ON ("products"."price") "products"."id", "products"."name", "products"."price" FROM "products" WHERE (((("products"."id") < '28' :: bigint) AND (("products"."id") >= '20' :: bigint) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))))) ORDER BY "products"."price" DESC LIMIT ('30') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withWhereIn
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND (("products"."id") = ANY (ARRAY(SELECT json_array_elements_text($1)) :: bigint[])))) LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withWhereAndList
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "products_0"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE (((("products"."price") > '10' :: numeric(7,2)) AND NOT (("products"."id") IS NULL) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))))) LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withWhereIsNull
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "products_0"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE (((("products"."price") > '10' :: numeric(7,2)) AND NOT (("products"."id") IS NULL) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))))) LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withWhereMultiOr
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "products_0"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND ((("products"."price") < '20' :: numeric(7,2)) OR (("products"."price") > '10' :: numeric(7,2)) OR NOT (("products"."id") IS NULL)))) LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withNestedWhere
SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND EXISTS (SELECT 1 FROM comments WHERE (("comments"."product_id") = ("products"."id")) AND EXISTS (SELECT 1 FROM users WHERE (("users"."id") = ("comments"."user_id")) AND ((("users"."email") = $1 :: character varying)))))) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/fetchByID
SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND (("products"."id") = $1 :: bigint))) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/searchQuery
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "products_0"."search_rank" AS "search_rank", "products_0"."search_headline_description" AS "search_headline_description" FROM (SELECT "products"."id", "products"."name", ts_rank("products"."tsv", websearch_to_tsquery($1)) AS "search_rank", ts_headline("products"."description", websearch_to_tsquery($1)) AS "search_headline_description" FROM "products" WHERE ((("products"."tsv") @@ websearch_to_tsquery($1))) LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/oneToMany
SELECT jsonb_build_object('users', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."email" AS "email", "__sj_1"."json" AS "products" FROM (SELECT "users"."email", "users"."id" FROM "users" LIMIT ('20') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id")) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('20') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/oneToManyReverse
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."name" AS "name", "products_0"."price" AS "price", "__sj_1"."json" AS "users" FROM (SELECT "products"."name", "products"."price", "products"."user_id" FROM "products" WHERE (((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('20') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."email" AS "email" FROM (SELECT "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('20') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/oneToManyArray
SELECT jsonb_build_object('tags', "__sj_0"."json", 'product', "__sj_2"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "products_2"."name" AS "name", "products_2"."price" AS "price", "__sj_3"."json" AS "tags" FROM (SELECT "products"."name", "products"."price", "products"."tags" FROM "products" LIMIT ('1') :: integer) AS "products_2" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_3"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_3".*) AS "json" FROM (SELECT "tags_3"."id" AS "id", "tags_3"."name" AS "name" FROM (SELECT "tags"."id", "tags"."name" FROM "tags" WHERE ((("tags"."slug") = any ("products_2"."tags"))) LIMIT ('20') :: integer) AS "tags_3") AS "__sr_3") AS "__sj_3") AS "__sj_3" ON true) AS "__sr_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "tags_0"."name" AS "name", "__sj_1"."json" AS "product" FROM (SELECT "tags"."name", "tags"."slug" FROM "tags" LIMIT ('20') :: integer) AS "tags_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."name" AS "name" FROM (SELECT "products"."name" FROM "products" WHERE ((("tags_0"."slug") = any ("products"."tags"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/manyToMany
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."name" AS "name", "__sj_1"."json" AS "customers" FROM (SELECT "products"."name", "products"."id" FROM "products" WHERE (((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('20') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "customers_1"."email" AS "email", "customers_1"."full_name" AS "full_name" FROM (SELECT "customers"."email", "customers"."full_name" FROM "customers" LEFT OUTER JOIN "purchases" ON (("purchases"."customer_id") = ("customers"."id")) WHERE ((("purchases"."product_id") = ("products_0"."id"))) LIMIT ('20') :: integer) AS "customers_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/manyToManyReverse
SELECT jsonb_build_object('customers', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "customers_0"."email" AS "email", "customers_0"."full_name" AS "full_name", "__sj_1"."json" AS "products" FROM (SELECT "customers"."email", "customers"."full_name", "customers"."id" FROM "customers" LIMIT ('20') :: integer) AS "customers_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."name" AS "name" FROM (SELECT "products"."name" FROM "products" LEFT OUTER JOIN "purchases" ON (("purchases"."product_id") = ("products"."id")) WHERE ((("purchases"."customer_id") = ("customers_0"."id")) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('20') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/aggFunction
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."name" AS "name", "products_0"."count_price" AS "count_price" FROM (SELECT "products"."name", count("products"."price") AS "count_price" FROM "products" WHERE (((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) GROUP BY "products"."name" LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/aggFunctionBlockedByCol
=== RUN   TestCompileQuery/aggFunctionDisabled
=== RUN   TestCompileQuery/aggFunctionWithFilter
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."max_price" AS "max_price" FROM (SELECT "products"."id", max("products"."price") AS "max_price" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND (("products"."id") > '10' :: bigint))) GROUP BY "products"."id" LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/syntheticTables
SELECT jsonb_build_object('me', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."email" AS "email" FROM (SELECT "users"."email" FROM "users" WHERE ((("users"."id") = $1 :: bigint)) LIMIT ('1') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/queryWithVariables
SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE (((("products"."price") = $1 :: numeric(7,2)) AND (("products"."id") = $2 :: bigint) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))))) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withWhereOnRelations
SELECT jsonb_build_object('users', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."email" AS "email" FROM (SELECT "users"."id", "users"."email" FROM "users" WHERE (NOT EXISTS (SELECT 1 FROM products WHERE (("products"."user_id") = ("users"."id")) AND ((("products"."price") > '3' :: numeric(7,2))))) LIMIT ('20') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/multiRoot
SELECT jsonb_build_object('customer', "__sj_0"."json", 'user', "__sj_1"."json", 'product', "__sj_2"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "products_2"."id" AS "id", "products_2"."name" AS "name", "__sj_3"."json" AS "customers", "__sj_4"."json" AS "customer" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE (((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('1') :: integer) AS "products_2" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_4".*) AS "json" FROM (SELECT "customers_4"."email" AS "email" FROM (SELECT "customers"."email" FROM "customers" LEFT OUTER JOIN "purchases" ON (("purchases"."customer_id") = ("customers"."id")) WHERE ((("purchases"."product_id") = ("products_2"."id"))) LIMIT ('1') :: integer) AS "customers_4") AS "__sr_4") AS "__sj_4" ON true LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_3"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_3".*) AS "json" FROM (SELECT "customers_3"."email" AS "email" FROM (SELECT "customers"."email" FROM "customers" LEFT OUTER JOIN "purchases" ON (("purchases"."customer_id") = ("customers"."id")) WHERE ((("purchases"."product_id") = ("products_2"."id"))) LIMIT ('20') :: integer) AS "customers_3") AS "__sr_3") AS "__sj_3") AS "__sj_3" ON true) AS "__sr_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."email" FROM "users" LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "customers_0"."id" AS "id" FROM (SELECT "customers"."id" FROM "customers" LIMIT ('1') :: integer) AS "customers_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withFragment1
SELECT jsonb_build_object('users', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."full_name" AS "full_name", "users_0"."avatar" AS "avatar", "users_0"."id" AS "id", "users_0"."email" AS "email" FROM (SELECT "users"."full_name", "users"."avatar", "users"."id", "users"."email" FROM "users" LIMIT ('20') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withFragment2
SELECT jsonb_build_object('users', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."full_name" AS "full_name", "users_0"."avatar" AS "avatar", "users_0"."id" AS "id", "users_0"."email" AS "email" FROM (SELECT "users"."full_name", "users"."avatar", "users"."id", "users"."email" FROM "users" LIMIT ('20') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withFragment3
SELECT jsonb_build_object('users', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."full_name" AS "full_name", "users_0"."avatar" AS "avatar", "users_0"."id" AS "id", "users_0"."email" AS "email" FROM (SELECT "users"."full_name", "users"."avatar", "users"."id", "users"."email" FROM "users" LIMIT ('20') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withFragment4
SELECT jsonb_build_object('users', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."full_name" AS "full_name", "users_0"."avatar" AS "avatar", "users_0"."id" AS "id", "users_0"."email" AS "email" FROM (SELECT "users"."full_name", "users"."avatar", "users"."id", "users"."email" FROM "users" LIMIT ('20') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withPolymorphicUnion
SELECT jsonb_build_object('notifications', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "notifications_0"."id" AS "id", (CASE WHEN "notifications_0"."subject_type" = 'products' THEN "__sj_2"."json" WHEN "notifications_0"."subject_type" = 'users' THEN "__sj_3"."json" END) AS "subjects" FROM (SELECT "notifications"."id", "notifications"."subject_id", "notifications"."subject_type" FROM "notifications" LIMIT ('20') :: integer) AS "notifications_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_3"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_3".*) AS "json" FROM (SELECT "users_3"."id" AS "id", "users_3"."email" AS "email" FROM (SELECT "users"."id", "users"."email" FROM "users" WHERE ((("users"."id") = ("notifications_0"."subject_id") AND ("notifications_0"."subject_type") = ('users'))) LIMIT ('20') :: integer) AS "users_3") AS "__sr_3") AS "__sj_3") AS "__sj_3" ON true LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_2"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "products_2"."id" AS "id", "products_2"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((("products"."id") = ("notifications_0"."subject_id") AND ("notifications_0"."subject_type") = ('products')) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2)))) LIMIT ('20') :: integer) AS "products_2") AS "__sr_2") AS "__sj_2") AS "__sj_2" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withSkipAndIncludeDirectives
SELECT jsonb_build_object('users', "__sj_0"."json", 'products', "__sj_1"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE ((((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))) AND ((VALUES(true)) = $1))) LIMIT ('6') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id" FROM (SELECT "users"."id" FROM "users" WHERE (((VALUES(true)) != $1)) LIMIT ('3') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/subscription
SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."email" AS "email" FROM (SELECT "users"."id", "users"."email" FROM "users" WHERE ((("users"."id") = "_sg_sub"."id" :: bigint)) LIMIT ('1') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/remoteJoin
SELECT jsonb_build_object('customers', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "customers_0"."email" AS "email", "customers_0"."id" AS "__customers_id" FROM (SELECT "customers"."email" FROM "customers" LIMIT ('20') :: integer) AS "customers_0" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT  FROM (SELECT  FROM "payments" WHERE ((())) LIMIT ('20') :: integer) AS "payments_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/jsonColumnAsTable
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "tag_count" FROM (SELECT "products"."id", "products"."name" FROM "products" LIMIT ('20') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "tag_count_1"."count" AS "count", "__sj_2"."json" AS "tags" FROM (SELECT "tag_count"."count", "tag_count"."tag_id" FROM "products", json_to_recordset("products"."tag_count") AS "tag_count"(tag_id bigint, count int) WHERE ((("products"."id") = ("products_0"."id"))) LIMIT ('1') :: integer) AS "tag_count_1" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_2"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "tags_2"."name" AS "name" FROM (SELECT "tags"."name" FROM "tags" WHERE ((("tags"."id") = ("tag_count_1"."tag_id"))) LIMIT ('20') :: integer) AS "tags_2") AS "__sr_2") AS "__sj_2") AS "__sj_2" ON true) AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/recursiveTableParents
SELECT jsonb_build_object('reply', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "comments_0"."id" AS "id", "__sj_1"."json" AS "comments" FROM (SELECT "comments"."id" FROM "comments" WHERE ((("comments"."id") = $1 :: bigint)) LIMIT ('1') :: integer) AS "comments_0" LEFT OUTER JOIN LATERAL (WITH RECURSIVE "_rcte_comments" AS ((SELECT "comments"."id", "comments"."reply_to_id" FROM "comments" WHERE ("comments"."id") = ("comments_0"."id") LIMIT 1) UNION ALL SELECT "comments"."id", "comments"."reply_to_id" FROM "comments", "_rcte_comments" WHERE (("_rcte_comments"."reply_to_id" IS NOT NULL) AND ("_rcte_comments"."reply_to_id") != ("_rcte_comments"."id") AND ("comments"."id") = ("_rcte_comments"."reply_to_id"))) SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "comments_1"."id" AS "id" FROM (SELECT "comments"."id", "comments"."reply_to_id" FROM (SELECT * FROM "_rcte_comments" OFFSET 1) "comments" LIMIT ('20') :: integer) AS "comments_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/recursiveTableChildren
SELECT jsonb_build_object('comment', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "comments_0"."id" AS "id", "__sj_1"."json" AS "replies" FROM (SELECT "comments"."id" FROM "comments" WHERE ((("comments"."id") = $1 :: bigint)) LIMIT ('1') :: integer) AS "comments_0" LEFT OUTER JOIN LATERAL (WITH RECURSIVE "_rcte_comments" AS ((SELECT "comments"."id", "comments"."reply_to_id" FROM "comments" WHERE ("comments"."id") = ("comments_0"."id") LIMIT 1) UNION ALL SELECT "comments"."id", "comments"."reply_to_id" FROM "comments", "_rcte_comments" WHERE (("comments"."reply_to_id" IS NOT NULL) AND ("comments"."reply_to_id") != ("comments"."id") AND ("comments"."reply_to_id") = ("_rcte_comments"."id"))) SELECT coalesce(jsonb_agg("__sj_1"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "comments_1"."id" AS "id" FROM (SELECT "comments"."id", "comments"."reply_to_id" FROM (SELECT * FROM "_rcte_comments" OFFSET 1) "comments" LIMIT ('20') :: integer) AS "comments_1") AS "__sr_1") AS "__sj_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/withCursor
SELECT jsonb_build_object('products', "__sj_0"."json", 'products_cursor', "__sj_0"."cursor") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json", CONCAT_WS(',', max("__cur_0"), max("__cur_1")) as "cursor" FROM (SELECT to_jsonb("__sr_0".*) - '__cur_0' - '__cur_1' AS "json" , "__cur_0", "__cur_1"FROM (SELECT "products_0"."name" AS "name", LAST_VALUE("products_0"."price") OVER() AS "__cur_0", LAST_VALUE("products_0"."id") OVER() AS "__cur_1" FROM (WITH "__cur" AS (SELECT a[1] :: numeric(7,2) as "price", a[2] :: bigint as "id" FROM string_to_array($1, ',') as a) SELECT "products"."name", "products"."price", "products"."id" FROM "products", "__cur" WHERE ((((("__cur"."price") IS NULL) OR (("products"."price") < "__cur"."price" :: numeric(7,2)) OR ((("products"."price") = "__cur"."price" :: numeric(7,2)) AND (("products"."id") > "__cur"."id" :: bigint))) AND ((("products"."price") > '0' :: numeric(7,2)) AND (("products"."price") < '8' :: numeric(7,2))))) ORDER BY "products"."price" DESC, "products"."id" ASC LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/nullForAuthRequiredInAnon
SELECT jsonb_build_object('products', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT coalesce(jsonb_agg("__sj_0"."json"), '[]') as "json" FROM (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", NULL AS "user" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" LIMIT ('20') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/blockedQuery
SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE (false) LIMIT ('1') :: integer) AS "users_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileQuery/blockedFunctions
--- PASS: TestCompileQuery (0.04s)
    --- PASS: TestCompileQuery/simpleQuery (0.00s)
    --- PASS: TestCompileQuery/withComplexArgs (0.00s)
    --- PASS: TestCompileQuery/withWhereIn (0.00s)
    --- PASS: TestCompileQuery/withWhereAndList (0.00s)
    --- PASS: TestCompileQuery/withWhereIsNull (0.00s)
    --- PASS: TestCompileQuery/withWhereMultiOr (0.00s)
    --- PASS: TestCompileQuery/withNestedWhere (0.00s)
    --- PASS: TestCompileQuery/fetchByID (0.00s)
    --- PASS: TestCompileQuery/searchQuery (0.00s)
    --- PASS: TestCompileQuery/oneToMany (0.00s)
    --- PASS: TestCompileQuery/oneToManyReverse (0.00s)
    --- PASS: TestCompileQuery/oneToManyArray (0.00s)
    --- PASS: TestCompileQuery/manyToMany (0.00s)
    --- PASS: TestCompileQuery/manyToManyReverse (0.00s)
    --- PASS: TestCompileQuery/aggFunction (0.00s)
    --- PASS: TestCompileQuery/aggFunctionBlockedByCol (0.00s)
    --- PASS: TestCompileQuery/aggFunctionDisabled (0.00s)
    --- PASS: TestCompileQuery/aggFunctionWithFilter (0.00s)
    --- PASS: TestCompileQuery/syntheticTables (0.00s)
    --- PASS: TestCompileQuery/queryWithVariables (0.00s)
    --- PASS: TestCompileQuery/withWhereOnRelations (0.00s)
    --- PASS: TestCompileQuery/multiRoot (0.00s)
    --- PASS: TestCompileQuery/withFragment1 (0.00s)
    --- PASS: TestCompileQuery/withFragment2 (0.00s)
    --- PASS: TestCompileQuery/withFragment3 (0.00s)
    --- PASS: TestCompileQuery/withFragment4 (0.00s)
    --- PASS: TestCompileQuery/withPolymorphicUnion (0.00s)
    --- PASS: TestCompileQuery/withSkipAndIncludeDirectives (0.00s)
    --- PASS: TestCompileQuery/subscription (0.00s)
    --- PASS: TestCompileQuery/remoteJoin (0.00s)
    --- PASS: TestCompileQuery/jsonColumnAsTable (0.00s)
    --- PASS: TestCompileQuery/recursiveTableParents (0.00s)
    --- PASS: TestCompileQuery/recursiveTableChildren (0.00s)
    --- PASS: TestCompileQuery/withCursor (0.00s)
    --- PASS: TestCompileQuery/nullForAuthRequiredInAnon (0.00s)
    --- PASS: TestCompileQuery/blockedQuery (0.00s)
    --- PASS: TestCompileQuery/blockedFunctions (0.00s)
=== RUN   TestCompileUpdate
=== RUN   TestCompileUpdate/singleUpdate
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (UPDATE "products" SET ("name", "description") = (SELECT "t"."name", "t"."description" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t) WHERE ((("products"."id") = '1' :: bigint) AND (("products"."id") = $2 :: bigint)) RETURNING "products".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name" FROM (SELECT "products"."id", "products"."name" FROM "products" WHERE (((("products"."id") = '1' :: bigint) AND (("products"."id") = $2 :: bigint))) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/simpleUpdateWithPresets
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (UPDATE "products" SET ("updated_at", "name", "price") = (SELECT 'now' :: timestamp without time zone, "t"."name", "t"."price" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t) WHERE (("products"."user_id") = $2 :: bigint) RETURNING "products".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id" FROM (SELECT "products"."id" FROM "products" WHERE ((("products"."user_id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/nestedUpdateManyToMany
WITH "_sg_input" AS (SELECT $1 :: json AS j), "purchases" AS (UPDATE "purchases" SET ("sale_type", "quantity", "due_date") = (SELECT "t"."sale_type", "t"."quantity", "t"."due_date" FROM "_sg_input" i, json_populate_record(NULL::"purchases", i.j) t) WHERE (("purchases"."id") = $2 :: bigint) RETURNING "purchases".*), "products" AS (UPDATE "products" SET ("name", "price") = (SELECT "t"."name", "t"."price" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t) FROM "purchases" WHERE (("products"."id") = ("purchases"."product_id")) RETURNING "products".*), "customers" AS (UPDATE "customers" SET ("full_name", "email") = (SELECT "t"."full_name", "t"."email" FROM "_sg_input" i, json_populate_record(NULL::"customers", i.j->'customer') t) FROM "purchases" WHERE (("customers"."id") = ("purchases"."customer_id")) RETURNING "customers".*) SELECT jsonb_build_object('purchase', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "purchases_0"."sale_type" AS "sale_type", "purchases_0"."quantity" AS "quantity", "purchases_0"."due_date" AS "due_date", "__sj_1"."json" AS "product", "__sj_2"."json" AS "customer" FROM (SELECT "purchases"."sale_type", "purchases"."quantity", "purchases"."due_date", "purchases"."product_id", "purchases"."customer_id" FROM "purchases" WHERE ((("purchases"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "purchases_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "customers_2"."id" AS "id", "customers_2"."full_name" AS "full_name", "customers_2"."email" AS "email" FROM (SELECT "customers"."id", "customers"."full_name", "customers"."email" FROM "customers" WHERE ((("customers"."id") = ("purchases_0"."customer_id"))) LIMIT ('1') :: integer) AS "customers_2") AS "__sr_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."id") = ("purchases_0"."product_id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "purchases" AS (UPDATE "purchases" SET ("sale_type", "quantity", "due_date") = (SELECT "t"."sale_type", "t"."quantity", "t"."due_date" FROM "_sg_input" i, json_populate_record(NULL::"purchases", i.j) t) WHERE (("purchases"."id") = $2 :: bigint) RETURNING "purchases".*), "customers" AS (UPDATE "customers" SET ("full_name", "email") = (SELECT "t"."full_name", "t"."email" FROM "_sg_input" i, json_populate_record(NULL::"customers", i.j->'customer') t) FROM "purchases" WHERE (("customers"."id") = ("purchases"."customer_id")) RETURNING "customers".*), "products" AS (UPDATE "products" SET ("name", "price") = (SELECT "t"."name", "t"."price" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t) FROM "purchases" WHERE (("products"."id") = ("purchases"."product_id")) RETURNING "products".*) SELECT jsonb_build_object('purchase', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "purchases_0"."sale_type" AS "sale_type", "purchases_0"."quantity" AS "quantity", "purchases_0"."due_date" AS "due_date", "__sj_1"."json" AS "product", "__sj_2"."json" AS "customer" FROM (SELECT "purchases"."sale_type", "purchases"."quantity", "purchases"."due_date", "purchases"."product_id", "purchases"."customer_id" FROM "purchases" WHERE ((("purchases"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "purchases_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_2".*) AS "json" FROM (SELECT "customers_2"."id" AS "id", "customers_2"."full_name" AS "full_name", "customers_2"."email" AS "email" FROM (SELECT "customers"."id", "customers"."full_name", "customers"."email" FROM "customers" WHERE ((("customers"."id") = ("purchases_0"."customer_id"))) LIMIT ('1') :: integer) AS "customers_2") AS "__sr_2") AS "__sj_2" ON true LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."id") = ("purchases_0"."product_id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/nestedUpdateOneToMany
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (UPDATE "users" SET ("full_name", "email", "created_at", "updated_at") = (SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t) WHERE (("users"."id") = '8' :: bigint) RETURNING "users".*), "products" AS (UPDATE "products" SET ("name", "price", "created_at", "updated_at") = (SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t) FROM "users" WHERE (("products"."user_id") = ("users"."id") AND "products"."name" = ((i.j->'product'->'where'->>'name'))::character varying AND "products"."price" = ((i.j->'product'->'where'->>'price'))::numeric(7,2) AND "products"."created_at" = ((i.j->'product'->'where'->>'created_at'))::timestamp without time zone AND "products"."updated_at" = ((i.j->'product'->'where'->>'updated_at'))::timestamp without time zone) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = '8' :: bigint)) LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (UPDATE "users" SET ("full_name", "email", "created_at", "updated_at") = (SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t) WHERE (("users"."id") = '8' :: bigint) RETURNING "users".*), "products" AS (UPDATE "products" SET ("name", "price", "created_at", "updated_at") = (SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t) FROM "users" WHERE (("products"."user_id") = ("users"."id") AND "products"."price" = ((i.j->'product'->'where'->>'price'))::numeric(7,2) AND "products"."created_at" = ((i.j->'product'->'where'->>'created_at'))::timestamp without time zone AND "products"."updated_at" = ((i.j->'product'->'where'->>'updated_at'))::timestamp without time zone AND "products"."name" = ((i.j->'product'->'where'->>'name'))::character varying) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = '8' :: bigint)) LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (UPDATE "users" SET ("full_name", "email", "created_at", "updated_at") = (SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t) WHERE (("users"."id") = '8' :: bigint) RETURNING "users".*), "products" AS (UPDATE "products" SET ("name", "price", "created_at", "updated_at") = (SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t) FROM "users" WHERE (("products"."user_id") = ("users"."id") AND "products"."created_at" = ((i.j->'product'->'where'->>'created_at'))::timestamp without time zone AND "products"."updated_at" = ((i.j->'product'->'where'->>'updated_at'))::timestamp without time zone AND "products"."name" = ((i.j->'product'->'where'->>'name'))::character varying AND "products"."price" = ((i.j->'product'->'where'->>'price'))::numeric(7,2)) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = '8' :: bigint)) LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (UPDATE "users" SET ("full_name", "email", "created_at", "updated_at") = (SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t) WHERE (("users"."id") = '8' :: bigint) RETURNING "users".*), "products" AS (UPDATE "products" SET ("name", "price", "created_at", "updated_at") = (SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j->'product') t) FROM "users" WHERE (("products"."user_id") = ("users"."id") AND "products"."updated_at" = ((i.j->'product'->'where'->>'updated_at'))::timestamp without time zone AND "products"."name" = ((i.j->'product'->'where'->>'name'))::character varying AND "products"."price" = ((i.j->'product'->'where'->>'price'))::numeric(7,2) AND "products"."created_at" = ((i.j->'product'->'where'->>'created_at'))::timestamp without time zone) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = '8' :: bigint)) LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/nestedUpdateOneToOne
WITH "_sg_input" AS (SELECT $1 :: json AS j), "products" AS (UPDATE "products" SET ("name", "price", "created_at", "updated_at") = (SELECT "t"."name", "t"."price", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"products", i.j) t) WHERE (("products"."id") = $2 :: bigint) RETURNING "products".*), "users" AS (UPDATE "users" SET ("email") = (SELECT "t"."email" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j->'user') t) FROM "products" WHERE (("users"."id") = ("products"."user_id")) RETURNING "users".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "user" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" WHERE ((("products"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."full_name" AS "full_name", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/nestedUpdateOneToManyWithConnect
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (UPDATE "users" SET ("full_name", "email", "created_at", "updated_at") = (SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t) WHERE (("users"."id") = $2 :: bigint) RETURNING "users".*), "products" AS ( UPDATE "products" SET "user_id" = "users"."id" FROM "users" WHERE ("products"."id" = ((i.j->'product'->'connect'->>'id'))::bigint) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "users" AS (UPDATE "users" SET ("full_name", "email", "created_at", "updated_at") = (SELECT "t"."full_name", "t"."email", "t"."created_at", "t"."updated_at" FROM "_sg_input" i, json_populate_record(NULL::"users", i.j) t) WHERE (("users"."id") = $2 :: bigint) RETURNING "users".*), "products" AS ( UPDATE "products" SET "user_id" =  NULL FROM "users" WHERE ("products"."id" = ((i.j->'product'->'disconnect'->>'id'))::bigint) RETURNING "products".*) SELECT jsonb_build_object('user', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "users_0"."id" AS "id", "users_0"."full_name" AS "full_name", "users_0"."email" AS "email", "__sj_1"."json" AS "product" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "users_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "products_1"."id" AS "id", "products_1"."name" AS "name", "products_1"."price" AS "price" FROM (SELECT "products"."id", "products"."name", "products"."price" FROM "products" WHERE ((("products"."user_id") = ("users_0"."id"))) LIMIT ('1') :: integer) AS "products_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/nestedUpdateOneToOneWithConnect
WITH "_sg_input" AS (SELECT $1 :: json AS j), "_x_users" AS (SELECT "id" FROM "_sg_input" i,"users" WHERE "users"."id" = ((i.j->'user'->'connect'->>'id'))::bigint AND "users"."email" = ((i.j->'user'->'connect'->>'email'))::character varying LIMIT 1), "products" AS (UPDATE "products" SET ("name", "price", "_x_users"."id") = (SELECT "t"."name", "t"."price", "_x_users"."id" FROM "_sg_input" i, "_x_users", json_populate_record(NULL::"products", i.j) t) WHERE (("products"."id") = $2 :: bigint) RETURNING "products".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "user" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" WHERE ((("products"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."full_name" AS "full_name", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
WITH "_sg_input" AS (SELECT $1 :: json AS j), "_x_users" AS (SELECT "id" FROM "_sg_input" i,"users" WHERE "users"."email" = ((i.j->'user'->'connect'->>'email'))::character varying AND "users"."id" = ((i.j->'user'->'connect'->>'id'))::bigint LIMIT 1), "products" AS (UPDATE "products" SET ("name", "price", "_x_users"."id") = (SELECT "t"."name", "t"."price", "_x_users"."id" FROM "_sg_input" i, "_x_users", json_populate_record(NULL::"products", i.j) t) WHERE (("products"."id") = $2 :: bigint) RETURNING "products".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "__sj_1"."json" AS "user" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" WHERE ((("products"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_1".*) AS "json" FROM (SELECT "users_1"."id" AS "id", "users_1"."full_name" AS "full_name", "users_1"."email" AS "email" FROM (SELECT "users"."id", "users"."full_name", "users"."email" FROM "users" WHERE ((("users"."id") = ("products_0"."user_id"))) LIMIT ('1') :: integer) AS "users_1") AS "__sr_1") AS "__sj_1" ON true) AS "__sr_0") AS "__sj_0" ON true
=== RUN   TestCompileUpdate/nestedUpdateOneToOneWithDisconnect
WITH "_sg_input" AS (SELECT $1 :: json AS j), "_x_users" AS (SELECT * FROM (VALUES(NULL::"bigint")) AS LOOKUP("id")), "products" AS (UPDATE "products" SET ("name", "price", "_x_users"."id") = (SELECT "t"."name", "t"."price", "_x_users"."id" FROM "_sg_input" i, "_x_users", json_populate_record(NULL::"products", i.j) t) WHERE (("products"."id") = $2 :: bigint) RETURNING "products".*) SELECT jsonb_build_object('product', "__sj_0"."json") AS "__root" FROM (VALUES(true)) AS "__root_x" LEFT OUTER JOIN LATERAL (SELECT to_jsonb("__sr_0".*) AS "json" FROM (SELECT "products_0"."id" AS "id", "products_0"."name" AS "name", "products_0"."user_id" AS "user_id" FROM (SELECT "products"."id", "products"."name", "products"."user_id" FROM "products" WHERE ((("products"."id") = $2 :: bigint)) LIMIT ('1') :: integer) AS "products_0") AS "__sr_0") AS "__sj_0" ON true
--- PASS: TestCompileUpdate (0.04s)
    --- PASS: TestCompileUpdate/singleUpdate (0.00s)
    --- PASS: TestCompileUpdate/simpleUpdateWithPresets (0.00s)
    --- PASS: TestCompileUpdate/nestedUpdateManyToMany (0.01s)
    --- PASS: TestCompileUpdate/nestedUpdateOneToMany (0.01s)
    --- PASS: TestCompileUpdate/nestedUpdateOneToOne (0.00s)
    --- PASS: TestCompileUpdate/nestedUpdateOneToManyWithConnect (0.01s)
    --- PASS: TestCompileUpdate/nestedUpdateOneToOneWithConnect (0.01s)
    --- PASS: TestCompileUpdate/nestedUpdateOneToOneWithDisconnect (0.00s)
PASS
ok  	github.com/dosco/super-graph/core/internal/psql	0.491s
